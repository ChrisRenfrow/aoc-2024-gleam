import d08
import gleam/result
import gleeunit
import gleeunit/should
import simplifile

pub fn main() {
  gleeunit.main()
}

pub fn distance_between_points_test() {
  let a = d08.Point(0, 0)
  let b = d08.Point(3, 4)
  d08.get_distance(a, b)
  |> should.equal(5.0)

  let c = d08.Point(1, 1)
  let d = d08.Point(4, 5)
  d08.get_distance(c, d)
  |> should.equal(5.0)

  let e = d08.Point(-1, -1)
  let f = d08.Point(2, 3)
  d08.get_distance(e, f)
  |> should.equal(5.0)

  let g = d08.Point(0, 0)
  let h = d08.Point(0, 5)
  d08.get_distance(g, h)
  |> should.equal(5.0)
}

pub fn antinodes_test() {
  let a = d08.Point(5, 5)
  let b = d08.Point(4, 3)
  d08.find_antinodes(a, b)
  |> should.equal(#(d08.Point(6, 7), d08.Point(3, 1)))

  let c = d08.Point(0, 0)
  let d = d08.Point(1, 1)
  d08.find_antinodes(c, d)
  |> should.equal(#(d08.Point(-1, -1), d08.Point(2, 2)))

  // ...#
  // ....
  // ....
  // ...o
  // ....
  // ....
  // ...o
  // ....
  // ....
  // ...#
  let e = d08.Point(3, 3)
  let f = d08.Point(3, 6)
  d08.find_antinodes(e, f)
  |> should.equal(#(d08.Point(3, 0), d08.Point(3, 9)))

  // ....#
  // .....
  // ....o
  // .....
  // ....o
  // .....
  // ....#
  let g = d08.Point(2, 4)
  let h = d08.Point(4, 4)
  d08.find_antinodes(g, h)
  |> should.equal(#(d08.Point(0, 4), d08.Point(6, 4)))
}

pub fn p1_simple_example_test() {
  // Antinodes: [(3,1), (6,7)]
  // ..........
  // ...#......
  // ..........
  // ....a.....
  // ..........
  // .....a....
  // ..........
  // ......#...
  // ..........
  // ..........
  let input =
    "..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
.........."
  let output = 2
  d08.p1(input)
  |> should.equal(output)
}

pub fn p1_less_simple_example_test() {
  // Antinodes: [(3,1), (6,7), (0,2), (2,6)]
  // ..........
  // ...#......
  // #.........
  // ....a.....
  // ........a.
  // .....a....
  // ..#.......
  // ......#...
  // ..........
  // ..........
  let input =
    "..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
.........."
  let output = 4
  d08.p1(input)
  |> should.equal(output)
}

pub fn p1_example_test() {
  let input =
    "............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............"
  let output = 14
  d08.p1(input)
  |> should.equal(output)
}

pub fn p1_solution_test() {
  let input =
    simplifile.read("input.txt")
    |> result.unwrap("")
  d08.p1(input)
  |> should.equal(305)
}

pub fn p2_example_test() {
  let input = ""
  let output = 0
  d08.p2(input)
  |> should.equal(output)
}

pub fn p2_solution_test() {
  let input =
    simplifile.read("input.txt")
    |> result.unwrap("")
  d08.p2(input)
  |> should.equal(0)
}
